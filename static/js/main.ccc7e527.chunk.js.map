{"version":3,"sources":["components/Upload.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Upload","props","React","useState","open","setOpen","images","setImages","useDropzone","accept","onDrop","acceptedFiles","map","file","url","URL","createObjectURL","title","name","key","v4","classifications","slice","getRootProps","getInputProps","upload","a","addImages","Button","variant","onClick","data-testid","Dialog","DialogTitle","DialogContent","length","Box","sx","margin","width","height","border","display","flexDirection","alignItems","justifyContent","Typography","textAlign","opacity","mb","List","maxHeight","image","index","ListItem","ListItemAvatar","Avatar","borderRadius","src","TextField","ml","label","value","onChange","event","prevImages","newImages","target","onTitleChange","DialogActions","App","anchorEl","setAnchorEl","Boolean","searchTitles","setSearchTitles","searchClassifications","setSearchClassifications","search","setSearch","fuse","Fuse","keys","displayImages","x","item","imgs","img","mobilenet","version","alpha","model","Image","Promise","r","onload","browser","fromPixelsAsync","imageData","classify","predictions","pred","push","className","split","prevState","concat","flexGrow","AppBar","position","Toolbar","minWidth","SearchIconWrapper","Search","StyledInputBase","placeholder","inputProps","IconButton","size","edge","color","aria-label","currentTarget","Settings","Menu","id","onClose","MenuListProps","MenuItem","FormControlLabel","control","Checkbox","checked","Container","ImageList","mx","overflow","cols","rowHeight","ImageListItem","alt","loading","ImageListItemBar","subtitle","join","actionIcon","filter","el","Delete","styled","theme","shape","backgroundColor","palette","common","white","marginLeft","breakpoints","up","spacing","padding","pointerEvents","InputBase","paddingLeft","transition","transitions","create","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ccc7e527.chunk.js","sourcesContent":["import React from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport {\n  Avatar,\n  Box,\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  List,\n  ListItem,\n  ListItemAvatar,\n  TextField,\n  Typography,\n} from \"@mui/material\";\nimport { v4 } from \"uuid\";\nimport { ImageData } from \"src/App\";\n\nexport default function Upload(props: { addImages: (imgs: ImageData[]) => void }) {\n  const [open, setOpen] = React.useState(false);\n\n  const [images, setImages] = React.useState<ImageData[]>([]);\n\n  const onDrop = (acceptedFiles: File[]) => {\n    const images = acceptedFiles.map((file) => ({\n      url: URL.createObjectURL(file),\n      title: file.name,\n      key: v4(),\n      classifications: [],\n    }));\n\n    setImages(images.slice());\n  };\n\n  const { getRootProps, getInputProps } = useDropzone({\n    accept: \"image/jpeg, image/png\",\n    onDrop,\n  });\n\n  const onTitleChange = (event: React.ChangeEvent<HTMLInputElement>, index: number) => {\n    setImages((prevImages) => {\n      let newImages = [...prevImages];\n      let image = images[index];\n      image.title = event.target.value;\n      newImages[index] = image;\n      return newImages;\n    });\n  };\n\n  const cancel = () => {\n    setOpen(false);\n    setImages([]);\n  };\n\n  const upload = async () => {\n    setOpen(false);\n    props.addImages(images);\n    setImages([]);\n  };\n\n  return (\n    <div>\n      <Button variant=\"contained\" onClick={() => setOpen(true)} data-testid=\"upload-button\">\n        Upload\n      </Button>\n      <Dialog open={open} data-testid=\"upload-dialog\">\n        <DialogTitle>Upload Images</DialogTitle>\n        <DialogContent>\n          {images.length === 0 ? (\n            <Box\n              {...getRootProps()}\n              sx={{\n                margin: \"4px\",\n                width: \"480px\",\n                height: \"320px\",\n                border: \"4px dashed rgba(100, 100, 100, .4)\",\n                display: \"flex\",\n                flexDirection: \"column\",\n                alignItems: \"center\",\n                justifyContent: \"center\",\n              }}\n            >\n              <input {...getInputProps()} />\n              <Typography variant=\"body1\" sx={{ textAlign: \"center\", opacity: 0.4, mb: 1 }}>\n                Drag 'n' drop some files here, or click to select files\n                <br />\n                (Only *.jpeg and *.png images will be accepted)\n              </Typography>\n            </Box>\n          ) : (\n            <List sx={{ maxHeight: 400 }}>\n              {images.map((image, index) => {\n                return (\n                  <ListItem key={image.key}>\n                    <ListItemAvatar>\n                      <Avatar sx={{ width: 160, height: 120, borderRadius: 2 }} variant=\"square\" src={image.url} />\n                    </ListItemAvatar>\n                    <TextField\n                      sx={{ ml: 2, width: 480 }}\n                      label=\"Title\"\n                      variant=\"outlined\"\n                      value={image.title}\n                      onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                        onTitleChange(event, index);\n                      }}\n                    />\n                  </ListItem>\n                );\n              })}\n            </List>\n          )}\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={cancel}>Cancel</Button>\n          <Button variant=\"contained\" onClick={upload} data-testid=\"upload-upload\">\n            Upload\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { styled, alpha } from \"@mui/material/styles\";\nimport {\n  AppBar,\n  Box,\n  Checkbox,\n  Container,\n  FormControlLabel,\n  IconButton,\n  ImageList,\n  ImageListItem,\n  ImageListItemBar,\n  InputBase,\n  Menu,\n  MenuItem,\n  Toolbar,\n} from \"@mui/material\";\nimport { Search as SearchIcon, Settings as SettingsIcon, Delete as DeleteIcon } from \"@mui/icons-material\";\nimport Upload from \"src/components/Upload\";\nimport Fuse from \"fuse.js\";\n\nimport \"@tensorflow/tfjs-backend-cpu\";\nimport \"@tensorflow/tfjs-backend-webgl\";\nimport { browser } from \"@tensorflow/tfjs-core\";\n\nimport * as mobilenet from \"@tensorflow-models/mobilenet\";\n\nexport interface ImageData {\n  url: string;\n  key: string;\n  title: string;\n  classifications: string[];\n}\n\nexport default function App() {\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n  const open = Boolean(anchorEl);\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const [searchTitles, setSearchTitles] = React.useState(true);\n  const [searchClassifications, setSearchClassifications] = React.useState(true);\n\n  const [images, setImages] = React.useState<ImageData[]>([]);\n\n  const [search, setSearch] = React.useState(\"\");\n\n  let fuse = new Fuse(images, {\n    keys: [...(searchTitles ? [\"title\"] : []), ...(searchClassifications ? [\"classifications\"] : [])],\n  });\n\n  const displayImages: ImageData[] = search === \"\" ? images : fuse.search(search).map((x) => x.item);\n\n  const addImages = async (imgs: ImageData[]) => {\n    for (const img of imgs) {\n      const model = await mobilenet.load({ version: 2, alpha: 0.5 });\n\n      const image = new Image();\n      image.src = img.url;\n\n      await new Promise((r) => (image.onload = r));\n      const imageData = await browser.fromPixelsAsync(image);\n\n      const predictions = await model.classify(imageData);\n\n      for (const pred of predictions) {\n        img.classifications.push(...pred.className.split(\", \"));\n      }\n\n      setImages((prevState) => prevState.concat([img]));\n    }\n  };\n\n  return (\n    <Box sx={{ flexGrow: 1 }}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Upload addImages={addImages} />\n\n          <Box sx={{ flexGrow: 1, minWidth: \"12px\" }} />\n\n          <Search>\n            <SearchIconWrapper>\n              <SearchIcon />\n            </SearchIconWrapper>\n            <StyledInputBase\n              placeholder=\"Search…\"\n              inputProps={{ \"aria-label\": \"search\" }}\n              onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                setSearch(event.target.value);\n              }}\n            />\n          </Search>\n\n          <IconButton\n            size=\"large\"\n            edge=\"start\"\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            sx={{ ml: 1 }}\n            onClick={handleClick}\n            data-testid=\"settings-button\"\n          >\n            <SettingsIcon />\n          </IconButton>\n\n          <Menu\n            id=\"basic-menu\"\n            anchorEl={anchorEl}\n            open={open}\n            onClose={handleClose}\n            MenuListProps={{\n              \"aria-labelledby\": \"basic-button\",\n            }}\n            data-testid=\"settings-menu\"\n          >\n            <MenuItem>\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    name=\"titles\"\n                    checked={searchTitles}\n                    onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                      setSearchTitles(event.target.checked);\n                    }}\n                  />\n                }\n                label=\"Search titles\"\n                sx={{ width: \"100%\", height: \"100%\" }}\n              />\n            </MenuItem>\n            <MenuItem>\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    name=\"classification\"\n                    checked={searchClassifications}\n                    onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                      setSearchClassifications(event.target.checked);\n                    }}\n                  />\n                }\n                label=\"Search image classification\"\n                sx={{ width: \"100%\", height: \"100%\" }}\n              />\n            </MenuItem>\n          </Menu>\n        </Toolbar>\n      </AppBar>\n\n      <Container>\n        <ImageList\n          sx={{ width: 960, height: \"100%\", mx: \"auto\", overflow: \"hidden\" }}\n          cols={3}\n          rowHeight={280}\n          data-testid=\"image-list\"\n        >\n          {displayImages.map((image) => (\n            <ImageListItem key={image.key}>\n              <img src={image.url} alt={image.title} loading=\"lazy\" />\n              <ImageListItemBar\n                title={image.title}\n                subtitle={image.classifications.join(\", \")}\n                actionIcon={\n                  <IconButton\n                    sx={{ color: \"rgba(255, 255, 255, 0.54)\" }}\n                    aria-label={`delete ${image.title}`}\n                    onClick={() => {\n                      setImages((prevState) => prevState.filter((el) => el.key !== image.key));\n                    }}\n                  >\n                    <DeleteIcon />\n                  </IconButton>\n                }\n              />\n            </ImageListItem>\n          ))}\n        </ImageList>\n      </Container>\n    </Box>\n  );\n}\n\nconst Search = styled(\"div\")(({ theme }) => ({\n  position: \"relative\",\n  borderRadius: theme.shape.borderRadius,\n  backgroundColor: alpha(theme.palette.common.white, 0.15),\n  \"&:hover\": {\n    backgroundColor: alpha(theme.palette.common.white, 0.25),\n  },\n  marginLeft: 0,\n  width: \"100%\",\n  [theme.breakpoints.up(\"sm\")]: {\n    marginLeft: theme.spacing(1),\n    width: \"auto\",\n  },\n}));\n\nconst SearchIconWrapper = styled(\"div\")(({ theme }) => ({\n  padding: theme.spacing(0, 2),\n  height: \"100%\",\n  position: \"absolute\",\n  pointerEvents: \"none\",\n  display: \"flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n}));\n\nconst StyledInputBase = styled(InputBase)(({ theme }) => ({\n  color: \"inherit\",\n  \"& .MuiInputBase-input\": {\n    padding: theme.spacing(1, 1, 1, 0),\n    paddingLeft: `calc(1em + ${theme.spacing(4)})`,\n    transition: theme.transitions.create(\"width\"),\n    width: \"100%\",\n    [theme.breakpoints.up(\"sm\")]: {\n      width: \"12ch\",\n      \"&:focus\": {\n        width: \"20ch\",\n      },\n    },\n  },\n}));\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"src/index.scss\";\nimport \"@fontsource/roboto/300.css\";\nimport \"@fontsource/roboto/400.css\";\nimport \"@fontsource/roboto/500.css\";\nimport \"@fontsource/roboto/700.css\";\nimport App from \"src/App\";\nimport reportWebVitals from \"src/reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}